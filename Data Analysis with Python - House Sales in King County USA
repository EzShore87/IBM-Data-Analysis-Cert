{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p style=\"text-align:center\">\n    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork971-2022-01-01\" target=\"_blank\">\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n    </a>\n</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "# House Sales in King County, USA\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "| Variable      | Description                                                                                                 |\n| ------------- | ----------------------------------------------------------------------------------------------------------- |\n| id            | A notation for a house                                                                                      |\n| date          | Date house was sold                                                                                         |\n| price         | Price is prediction target                                                                                  |\n| bedrooms      | Number of bedrooms                                                                                          |\n| bathrooms     | Number of bathrooms                                                                                         |\n| sqft_living   | Square footage of the home                                                                                  |\n| sqft_lot      | Square footage of the lot                                                                                   |\n| floors        | Total floors (levels) in house                                                                              |\n| waterfront    | House which has a view to a waterfront                                                                      |\n| view          | Has been viewed                                                                                             |\n| condition     | How good the condition is overall                                                                           |\n| grade         | overall grade given to the housing unit, based on King County grading system                                |\n| sqft_above    | Square footage of house apart from basement                                                                 |\n| sqft_basement | Square footage of the basement                                                                              |\n| yr_built      | Built Year                                                                                                  |\n| yr_renovated  | Year when house was renovated                                                                               |\n| zipcode       | Zip code                                                                                                    |\n| lat           | Latitude coordinate                                                                                         |\n| long          | Longitude coordinate                                                                                        |\n| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.\n# !mamba install -qy pandas==1.3.4 numpy==1.21.4 seaborn==0.9.0 matplotlib==3.5.0 scikit-learn==0.20.1\n# Note: If your environment doesn't support \"!mamba install\", use \"!pip install\"",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": " # Surpress warnings:\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "You will require the following libraries:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import piplite\nawait piplite.install(['pandas','matplotlib','scikit-learn','seaborn', 'numpy'])\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "# Module 1: Importing Data Sets\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "The functions below will download the dataset into your browser:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "file_name='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "You will need to download the dataset; if you are running locally, please comment out the following code: \n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "await download(file_name, \"kc_house_data_NaN.csv\")\nfile_name=\"kc_house_data_NaN.csv\"",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Use the Pandas method <b>read_csv()</b> to load the data from the web address.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df = pd.read_csv(file_name)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We use the method <code>head</code> to display the first 5 columns of the dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": [
        {
          "execution_count": 8,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n\n   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n0         1180      5650     1.0           0  ...      7        1180   \n1         2570      7242     2.0           0  ...      7        2170   \n2          770     10000     1.0           0  ...      6         770   \n3         1960      5000     1.0           0  ...      7        1050   \n4         1680      8080     1.0           0  ...      8        1680   \n\n   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n0              0      1955             0    98178  47.5112 -122.257   \n1            400      1951          1991    98125  47.7210 -122.319   \n2              0      1933             0    98028  47.7379 -122.233   \n3            910      1965             0    98136  47.5208 -122.393   \n4              0      1987             0    98074  47.6168 -122.045   \n\n   sqft_living15  sqft_lot15  \n0           1340        5650  \n1           1690        7639  \n2           2720        8062  \n3           1360        5000  \n4           1800        7503  \n\n[5 rows x 22 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3.0</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3.0</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2.0</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4.0</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3.0</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 1\n\nDisplay the data types of each column using the function dtypes, then take a screenshot and submit it, include your code in the image.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.dtypes",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "execution_count": 9,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Unnamed: 0         int64\nid                 int64\ndate              object\nprice            float64\nbedrooms         float64\nbathrooms        float64\nsqft_living        int64\nsqft_lot           int64\nfloors           float64\nwaterfront         int64\nview               int64\ncondition          int64\ngrade              int64\nsqft_above         int64\nsqft_basement      int64\nyr_built           int64\nyr_renovated       int64\nzipcode            int64\nlat              float64\nlong             float64\nsqft_living15      int64\nsqft_lot15         int64\ndtype: object"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We use the method describe to obtain a statistical summary of the dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "execution_count": 10,
          "output_type": "execute_result",
          "data": {
            "text/plain": "        Unnamed: 0            id         price      bedrooms     bathrooms  \\\ncount  21613.00000  2.161300e+04  2.161300e+04  21600.000000  21603.000000   \nmean   10806.00000  4.580302e+09  5.400881e+05      3.372870      2.115736   \nstd     6239.28002  2.876566e+09  3.671272e+05      0.926657      0.768996   \nmin        0.00000  1.000102e+06  7.500000e+04      1.000000      0.500000   \n25%     5403.00000  2.123049e+09  3.219500e+05      3.000000      1.750000   \n50%    10806.00000  3.904930e+09  4.500000e+05      3.000000      2.250000   \n75%    16209.00000  7.308900e+09  6.450000e+05      4.000000      2.500000   \nmax    21612.00000  9.900000e+09  7.700000e+06     33.000000      8.000000   \n\n        sqft_living      sqft_lot        floors    waterfront          view  \\\ncount  21613.000000  2.161300e+04  21613.000000  21613.000000  21613.000000   \nmean    2079.899736  1.510697e+04      1.494309      0.007542      0.234303   \nstd      918.440897  4.142051e+04      0.539989      0.086517      0.766318   \nmin      290.000000  5.200000e+02      1.000000      0.000000      0.000000   \n25%     1427.000000  5.040000e+03      1.000000      0.000000      0.000000   \n50%     1910.000000  7.618000e+03      1.500000      0.000000      0.000000   \n75%     2550.000000  1.068800e+04      2.000000      0.000000      0.000000   \nmax    13540.000000  1.651359e+06      3.500000      1.000000      4.000000   \n\n       ...         grade    sqft_above  sqft_basement      yr_built  \\\ncount  ...  21613.000000  21613.000000   21613.000000  21613.000000   \nmean   ...      7.656873   1788.390691     291.509045   1971.005136   \nstd    ...      1.175459    828.090978     442.575043     29.373411   \nmin    ...      1.000000    290.000000       0.000000   1900.000000   \n25%    ...      7.000000   1190.000000       0.000000   1951.000000   \n50%    ...      7.000000   1560.000000       0.000000   1975.000000   \n75%    ...      8.000000   2210.000000     560.000000   1997.000000   \nmax    ...     13.000000   9410.000000    4820.000000   2015.000000   \n\n       yr_renovated       zipcode           lat          long  sqft_living15  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000   21613.000000   \nmean      84.402258  98077.939805     47.560053   -122.213896    1986.552492   \nstd      401.679240     53.505026      0.138564      0.140828     685.391304   \nmin        0.000000  98001.000000     47.155900   -122.519000     399.000000   \n25%        0.000000  98033.000000     47.471000   -122.328000    1490.000000   \n50%        0.000000  98065.000000     47.571800   -122.230000    1840.000000   \n75%        0.000000  98118.000000     47.678000   -122.125000    2360.000000   \nmax     2015.000000  98199.000000     47.777600   -121.315000    6210.000000   \n\n          sqft_lot15  \ncount   21613.000000  \nmean    12768.455652  \nstd     27304.179631  \nmin       651.000000  \n25%      5100.000000  \n50%      7620.000000  \n75%     10083.000000  \nmax    871200.000000  \n\n[8 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21613.00000</td>\n      <td>2.161300e+04</td>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>...</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>10806.00000</td>\n      <td>4.580302e+09</td>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>...</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6239.28002</td>\n      <td>2.876566e+09</td>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>...</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.00000</td>\n      <td>1.000102e+06</td>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5403.00000</td>\n      <td>2.123049e+09</td>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>10806.00000</td>\n      <td>3.904930e+09</td>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>16209.00000</td>\n      <td>7.308900e+09</td>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>21612.00000</td>\n      <td>9.900000e+09</td>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>...</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 2: Data Wrangling\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Question 2\n\nDrop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.drop(['id','Unnamed: 0'],axis=1,inplace=True)\ndf.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "execution_count": 11,
          "output_type": "execute_result",
          "data": {
            "text/plain": "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\ncount  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \nmean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \nstd    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \nmin    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \nmax    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n\n             floors    waterfront          view     condition         grade  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \nmean       1.494309      0.007542      0.234303      3.409430      7.656873   \nstd        0.539989      0.086517      0.766318      0.650743      1.175459   \nmin        1.000000      0.000000      0.000000      1.000000      1.000000   \n25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n75%        2.000000      0.000000      0.000000      4.000000      8.000000   \nmax        3.500000      1.000000      4.000000      5.000000     13.000000   \n\n         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\ncount  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \nmean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \nstd      828.090978     442.575043     29.373411    401.679240     53.505026   \nmin      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \nmax     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n\n                lat          long  sqft_living15     sqft_lot15  \ncount  21613.000000  21613.000000   21613.000000   21613.000000  \nmean      47.560053   -122.213896    1986.552492   12768.455652  \nstd        0.138564      0.140828     685.391304   27304.179631  \nmin       47.155900   -122.519000     399.000000     651.000000  \n25%       47.471000   -122.328000    1490.000000    5100.000000  \n50%       47.571800   -122.230000    1840.000000    7620.000000  \n75%       47.678000   -122.125000    2360.000000   10083.000000  \nmax       47.777600   -121.315000    6210.000000  871200.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>3.409430</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>0.650743</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of NaN values for the column bedrooms : 13\nnumber of NaN values for the column bathrooms : 10\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "mean=df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "mean=df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 15,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of NaN values for the column bedrooms : 0\nnumber of NaN values for the column bathrooms : 0\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 3: Exploratory Data Analysis\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Question 3\n\nUse the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.floors.value_counts().to_frame()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "execution_count": 16,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     floors\n1.0   10680\n2.0    8241\n1.5    1910\n3.0     613\n2.5     161\n3.5       8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>floors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1.0</th>\n      <td>10680</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>8241</td>\n    </tr>\n    <tr>\n      <th>1.5</th>\n      <td>1910</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>613</td>\n    </tr>\n    <tr>\n      <th>2.5</th>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>3.5</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 4\n\nUse the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(x='waterfront',y='price',data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 17,
      "outputs": [
        {
          "execution_count": 17,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='waterfront', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 5\n\nUse the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x=df[\"sqft_above\"],y=df[\"price\"],data=df)\nplt.ylim(0,)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 18,
      "outputs": [
        {
          "execution_count": 18,
          "output_type": "execute_result",
          "data": {
            "text/plain": "(0.0, 8081250.0)"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()['price'].sort_values()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "zipcode         -0.053203\nlong             0.021626\ncondition        0.036362\nyr_built         0.054012\nsqft_lot15       0.082447\nsqft_lot         0.089661\nyr_renovated     0.126434\nfloors           0.256794\nwaterfront       0.266369\nlat              0.307003\nbedrooms         0.308797\nsqft_basement    0.323816\nview             0.397293\nbathrooms        0.525738\nsqft_living15    0.585379\nsqft_above       0.605567\ngrade            0.667434\nsqft_living      0.702035\nprice            1.000000\nName: price, dtype: float64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 4: Model Development\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "execution_count": 20,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.00046769430149007363"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question  6\n\nFit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "x=df[['sqft_living']]\ny=df.price\nlr=LinearRegression()\nlr.fit(x,y)\nlr.score(x,y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.4928532179037931"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 7\n\nFit a linear regression model to predict the <code>'price'</code> using the list of features:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]     ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Then calculate the R^2. Take a screenshot of your code.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "x=df[features]\ny=df.price\nlr.fit(x,y)\nlr.score(x,y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "execution_count": 23,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.6576890354915759"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### This will help with Question 8\n\nCreate a list of tuples, the first element in the tuple contains the name of the estimator:\n\n<code>'scale'</code>\n\n<code>'polynomial'</code>\n\n<code>'model'</code>\n\nThe second element in the tuple  contains the model constructor\n\n<code>StandardScaler()</code>\n\n<code>PolynomialFeatures(include_bias=False)</code>\n\n<code>LinearRegression()</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "### Question 8\n\nUse the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "x=df[features]\ny=df.price\npipe=Pipeline(Input)\npipe.fit(x,y)\npipe.score(x,y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 25,
      "outputs": [
        {
          "execution_count": 25,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.7512398529081656"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 5: Model Evaluation and Refinement\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Import the necessary modules:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nprint(\"done\")",
      "metadata": {
        "trusted": true
      },
      "execution_count": 26,
      "outputs": [
        {
          "name": "stdout",
          "text": "done\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We will split the data into training and testing sets:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples:\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of test samples: 3242\nnumber of training samples: 18371\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 9\n\nCreate and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.linear_model import Ridge",
      "metadata": {
        "trusted": true
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "rm=Ridge(alpha=0.1)\nrm.fit(x_train,y_train)\nrm.score(x_test,y_test)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": [
        {
          "execution_count": 29,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.647875916393906"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 10\n\nPerform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pr=PolynomialFeatures(degree=2)\nx_train_pr=pr.fit_transform(x_train)\nx_test_pr=pr.fit_transform(x_test)\n\nrr=Ridge(alpha=0.1)\nrr.fit(x_train_pr,y_train)\nrr.score(x_test_pr,y_test)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 31,
      "outputs": [
        {
          "execution_count": 31,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.7002744270151646"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Once you complete your notebook you will have to share it. Select the icon on the top right a marked in red in the image below, a dialogue box should open, and select the option all&nbsp;content excluding sensitive code cells.</p>\n        <p><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/share_notebook.png\" alt=\"share notebook\" style=\"display: block; margin-left: auto; margin-right: auto;\"></p>\n        <p></p>\n        <p>You can then share the notebook&nbsp; via a&nbsp; URL by scrolling down as shown in the following image:</p>\n        <p style=\"text-align: center;\"><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/url_notebook.png\" alt=\"HTML\" style=\"display: block; margin-left: auto; margin-right: auto;\"></p>\n        <p>&nbsp;</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>About the Authors:</h2> \n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Michelle Carey</a>, <a href=\"https://www.linkedin.com/in/jiahui-mavis-zhou-a4537814a?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Mavis Zhou</a>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By      | Change Description                           |\n| ----------------- | ------- | --------------- | -------------------------------------------- |\n| 2020-12-01        | 2.2     | Aije Egwaikhide | Coverted Data describtion from text to table |\n| 2020-10-06        | 2.1     | Lakshmi Holla   | Changed markdown instruction of Question1    |\n| 2020-08-27        | 2.0     | Malika Singla   | Added lab to GitLab                          |\n\n<hr>\n\n## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n\n<p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}